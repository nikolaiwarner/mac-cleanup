name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
        id: go

      - name: Print Go version and environment
        id: vars
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nSystem environment:\n\n"
          env
          echo "::set-output name=version_tag::${GITHUB_REF/refs\/tags\//}"
          echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"
          echo "::set-output name=go_cache::$(go env GOCACHE)"
          # Add "pip install" CLI tools to PATH
          echo ~/.local/bin >> $GITHUB_PATH
          # Parse semver
          TAG=${GITHUB_REF/refs\/tags\//}
          SEMVER_RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z\.-]*\)'
          TAG_MAJOR=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\1#"`
          TAG_MINOR=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\2#"`
          TAG_PATCH=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\3#"`
          TAG_SPECIAL=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\4#"`
          echo "::set-output name=tag_major::${TAG_MAJOR}"
          echo "::set-output name=tag_minor::${TAG_MINOR}"
          echo "::set-output name=tag_patch::${TAG_PATCH}"
          echo "::set-output name=tag_special::${TAG_SPECIAL}"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
            gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
            passphrase: ${{ secrets.PASSPHRASE }}

      - name: Release
        uses: goreleaser/goreleaser-action@master
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GO_RELEASE_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

  homebrew:
    name: Bump Homebrew formula
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
      - uses: mislav/bump-homebrew-formula-action@v1
        if: "!contains(github.ref, '-')"
        with:
          formula-name: mac-cleanup
          formula-path: Formula/mac-cleanup.rb
          homebrew-tap: mac-cleanup/homebrew-tap
          base-branch: main
          commit-message: |
            {{formulaName}} {{version}}
        env:
          COMMITTER_TOKEN: ${{ secrets.GO_RELEASE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GO_RELEASE_TOKEN }}
